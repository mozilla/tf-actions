name: "Mozilla Terraform CI"
description: "Terraform CI for Mozilla SRE Teams"

inputs:
  readme_check:
    description: "Check Terraform path for README.md"
    required: false
    default: "false"
  tfpath:
    description: "Terraform git repository path"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Clone Repository
      uses: actions/checkout@v2
    - name: Install jq
      shell: bash
      run: |
        # "****** INSTALL JQ ******"

        if ! command -v "jq" > /dev/null; then
          sudo apt-get update
          sudo apt-get install jq
        fi
        jq --version
    - name: Install json2hcl
      shell: bash
      run: |
        # "****** INSTALL JSON2HCL ******"

        if ! command -v "json2hcl" > /dev/null; then
          curl -SsL https://github.com/kvz/json2hcl/releases/download/v0.0.6/json2hcl_v0.0.6_linux_amd64 | sudo tee /usr/local/bin/json2hcl > /dev/null
          sudo chmod 755 /usr/local/bin/json2hcl
          json2hcl -version
        fi
    - name: Install TFEnv
      shell: bash
      run: |
        # "****** INSTALL TFENV ******"

        if ! command -v "tfenv" > /dev/null; then
          git clone https://github.com/tfutils/tfenv.git ~/.tfenv
          sudo rm /usr/local/bin/tfenv || echo "INFO: No tfenv installed"
          sudo rm /usr/local/bin/terraform || echo "INFO: No terraform installed"
          sudo ln -s ~/.tfenv/bin/* /usr/local/bin > /dev/null
        fi
    - name: Terraform Install
      working-directory: ${{ inputs.tfpath }}
      shell: bash
      run: |
        # "****** INSTALL TERRAFORM ******"

        if [ -f .terraform-version ]; then
          tfenv install "$(cat .terraform-version)" > /dev/null
        else
          tfenv install 1.0.0 && tfenv use 1.0.0 > /dev/null
        fi
    - name: Check README.md
      if: inputs.readme_check == 'true'
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** CHECK README.MD ******"

        if [[ ! -f README.md ]]; then
          echo "ERROR: ${{ inputs.tfpath }}/README.md missing."
          exit 1
        fi
    - name: Check .terraform-version
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** CHECK .terraform-version ******"

        if [[ ! -f .terraform-version ]]; then
          echo "WARNING: ${{ inputs.tfpath }}/.terraform-version missing."
        fi
    - name: Check .terraform.lock.hcl
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** CHECK .terraform.lock.hcl ******"

        if [[ ! -f .terraform.lock.hcl ]]; then
          echo "WARNING: ${{ inputs.tfpath }}/.terraform.lock.hcl missing."
        fi
    - name: Check terraform.required_version
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** CHECK terraform.required_version ******"

        match="[[:space:]]+terraform[[:space:]]+{[[:space:]]+required_version[[:space:]]+.*"
        file_content=$(cat versions.tf)
        
        if [[ " $file_content " =~ $match ]]; then
          echo "ERROR: ${{ inputs.tfpath }}/versions.tf missing `terraform.required_version`."
          exit 1 
        fi
    - name: Project name matches terraform.backend.gcs.prefix
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** PROJECT NAME MATCHES terraform.backend.gcs.prefix ******"

        if [[ ! -f terraform.tf ]]; then
          echo "INFO: ${{ inputs.tfpath }}/terraform.tf not present."
        else
          proj_dir=$(echo ${{ inputs.tfpath }} | cut -d'/' -f1 -s)
          tf_dir=$(echo ${{ inputs.tfpath }} | cut -d'/' -f2 -s)
          env_dir=$(echo ${{ inputs.tfpath }} | cut -d'/' -f3 -s)

          file_content=$(cat terraform.tf)
          json_content=$(echo $file_content | json2hcl --reverse)
          gcs_backend=$(echo $json_content | jq ".terraform[].backend[] | has(\"gcs\")")

          if $gcs_backend; then
            gcs_prefix=$(echo $json_content | jq -re ".terraform[].backend[].gcs[].prefix")

            if [ ! -z "${env_dir}" ] ; then
              echo "INFO: ${{ inputs.tfpath }} is using Terraform environment subdirectories."
              if [[ "$gcs_prefix" != "projects/${proj_dir}/${env_dir}" ]] ; then
                echo "ERROR: ${{ inputs.tfpath }}/terraform.tf has incorrect terraform.backend.gcs.prefix ${gcs_prefix}."
                exit 1 
              fi
            else
              echo "INFO: ${{ inputs.tfpath }} is not using Terraform environment subdirectories."
              if [[ "$gcs_prefix" != "projects/${proj_dir}" ]] ; then
                echo "ERROR: ${{ inputs.tfpath }}/terraform.tf has incorrect terraform.backend.gcs.prefix ${gcs_prefix}."
                exit 1 
              fi
            fi
          else
            echo "INFO: ${{ inputs.tfpath }}/terraform.tf not using GCS backend."
          fi
        fi
    - name: Terraform Format
      working-directory: ${{ inputs.tfpath }}
      shell: bash
      run: |
        # "****** TERRAFORM FORMAT ******"

        tfenv install "$(cat .terraform-version)" > /dev/null
        terraform fmt -recursive=true -check=true -diff=true -write=false
    - name: Terraform Init
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** TERRAFORM INIT ******"

        terraform init --backend=false
    - name: Terraform Validate
      shell: bash
      working-directory: ${{ inputs.tfpath }}
      run: |
        # "****** TERRAFORM VALIDATE ******"

        terraform validate
